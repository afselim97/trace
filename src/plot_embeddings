#!/usr/bin/env python3
import numpy as np
import pandas as pd
import argparse
import plotly.express as px
import plotly.io as pio
import os
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import demes
import demesdraw

def get_colors(embeddings_df,dirname):
    labels = np.unique(embeddings_df.population)
    if "SS" in dirname:
        labels = np.array(sorted(labels, key=lambda x: int(x.split('_')[1])))
    K = len(labels)
    cmap = plt.get_cmap("rainbow")
    colors = cmap(np.linspace(0,255,K).astype(int))[:,:-1]
    colors_dict = {label:mcolors.to_hex(colors[i]) for i,label in enumerate(labels)}
    return colors_dict

def plot_deme(dirname,t_list,colors_dict,log_time):
    graph = demes.load(os.path.join(dirname,"deme.yaml"))
    fig,ax_demes = plt.subplots(figsize = (3,5))
    demesdraw.tubes(graph,ax=ax_demes,max_time=np.max(t_list),colours = colors_dict,labels="xticks-legend",log_time=log_time)
    ax_demes.set_title("Simulated Demography")
    if ax_demes.get_legend() is not None:
        ax_demes.get_legend().remove()
    fig.savefig(os.path.join(dirname,"deme.png"),dpi=500)
    return fig

def dynamic_3d_plot(dirname, embeddings_df,colors_dict,log_time):
    component_1_df = embeddings_df[embeddings_df.component==1].drop(columns=["component","time_inx"])
    component_1_df.rename(columns={'embedding': 'dimension 1'}, inplace=True)
    component_2_df = embeddings_df[embeddings_df.component==2].drop(columns=["component","time_inx"])
    component_2_df.rename(columns={'embedding': 'dimension 2'}, inplace=True)
    df = pd.merge(component_1_df,component_2_df,how="right",on=["sample_id","population","time"])
    fig = px.line_3d(df, x="dimension 1", y="dimension 2", z="time",log_z=log_time, color='population',line_group='sample_id',
        color_discrete_map=colors_dict
    )
    fig.update_layout(showlegend=False)
    fig.show()
    pio.write_html(fig, file=os.path.join(dirname,"dynamic_3d_plot.html"))

    return fig


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-dirname", type=str, required=True, help="path to directory where embeddings dataframe is stored")    
    parser.add_argument("-log_time", action="store_true", help="use this flag to have log-spaced time points")
    args = parser.parse_args()
    dirname = args.dirname
    log_time = args.log_time

    embeddings_df = pd.read_parquet(os.path.join(dirname,"embeddings.parquet"))
    embeddings_df["time"] = np.round(embeddings_df["time"],2)
    t_list = np.unique(embeddings_df.time)
    colors_dict = get_colors(embeddings_df,dirname)

    # Plotting the demography using demesdraw
    if "deme.yaml" in os.listdir(dirname):
        deme_fig = plot_deme(dirname,t_list,colors_dict,log_time)


    dynamic_fig = dynamic_3d_plot(dirname, embeddings_df, colors_dict, log_time)

if __name__ == "__main__":
    main()